openapi: 3.0.0
info:
  title: register-service
  description: API description
  version: 1.0.0
servers:
  - url: http://localhost:8000
paths:
  /user/register:
    post:
      summary: register user
      description: register user in database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                userRequestDTO:
                  name: "any"
                  identity: "333.444.555-69"
                  email: "any@email.com"
                  password: "any" 
                  userType: "USER/SHOPKEEPER"
      responses:
        '201':
          description: Operation successfully
          content:
            application/json:
              example:
                userResponseDTO:
                  id: long
                  name: "any"
                  identity: "333.444.555-69"
                  email: "any@email.com"
                  password: "any" 
                  userType: "USER/SHOPKEEPER"
                  wallet: WalletModel
              
        '400':
          description: Email or Indentity credentials already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /user/login:
    post:
      summary: login user
      description: login user by credentials and return token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                userLoginDTO:
                  email: string
                  password: string

      responses:
        200:
          description: successfully login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

        401:
          description: email or password is wrong!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /user/update/{id}:
    put:
      summary: update user
      description: update user by id and return user model
      parameters:
        - name: id
          in: path
          description: id for searching user in database
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                userRequestDTO:
                  name: "any"
                  identity: "333.444.555-69"
                  email: "any@email.com"
                  password: "any" 
                  userType: "USER/SHOPKEEPER"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              example:
                userResponseDTO:
                  id: long
                  name: "any"
                  identity: "333.444.555-69"
                  email: "any@email.com"
                  password: "any" 
                  userType: "USER/SHOPKEEPER"
                  wallet: WalletModel
        404:
          description: User id not found!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /user/delete/{id}:
    delete:
      summary: delete user by id
      description: delete an existing user by its unique ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID to delete.
      responses:
        204:
          description: Operation carried out successfully
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /user/{id}:
    get:
      summary: get user by ID
      description: get user by id on database
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID to update.
      responses:
        200:
          description: Operation carried out successfully
          content:
            application/json:
              example:
                userResponseDTO:
                  id: long
                  name: "any"
                  identity: "333.444.555-69"
                  email: "any@email.com"
                  password: "any" 
                  userType: "USER/SHOPKEEPER"
                  wallet: WalletModel
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /user/{email}:
    get:
      summary: get user by email
      description: get user by email on database
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: ID to get.
      responses:
        200:
          description: Operation carried out successfully
          content:
            application/json:
              example:
                userResponseDTO:
                  id: long
                  name: "any"
                  identity: "333.444.555-69"
                  email: "any@email.com"
                  password: "any" 
                  userType: "USER/SHOPKEEPER"
                  wallet: WalletModel
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

components:
  schemas:
    ErrorModel:
      type: object
      properties:
        code:
          type: integer
        type:
          type: string
        message:
          type: string